[
    "i64x2.extmul_high_i32x4_u",
    "elem.drop",
    "i32x4.ne",
    "i64.ctz",
    "i32x4.eq",
    "f64x2.le",
    "v128.store64_lane",
    "i64.clz",
    "f64x2.convert_low_i32x4_s",
    "i32.store8",
    "f32.store",
    "i32x4.shr_u",
    "i64.shr_u",
    "i32x4.lt_s",
    "f64x2.sub",
    "i8x16.gt_s",
    "i64.store",
    "i64.eq",
    "i64.le_u",
    "f32x4.ge",
    "i16x8.extract_lane_u",
    "i32.eqz",
    "f64x2.floor",
    "i64x2.mul",
    "i32x4.le_u",
    "i8x16.swizzle",
    "i32x4.max_s",
    "i32.add",
    "i32.rem_u",
    "i32.ctz",
    "i16x8.le_s",
    "i16x8.extmul_low_i8x16_u",
    "f64x2.promote_low_f32x4",
    "i32.trunc_f64_u",
    "i32.ne",
    "f64.div",
    "i64x2.bitmask",
    "f64x2.mul",
    "i64.trunc_sat_f64_s",
    "i32x4.extmul_high_i16x8_s",
    "i8x16.extract_lane_u",
    "f32.gt",
    "i16x8.extend_low_i8x16_s",
    "i8x16.add_sat_u",
    "i8x16.all_true",
    "i64x2.all_true",
    "f64x2.div",
    "i64.trunc_f64_u",
    "f32x4.convert_i32x4_s",
    "i64.load32_u",
    "i8x16.lt_s",
    "f32x4.demote_f64x2_zero",
    "f32x4.ceil",
    "i8x16.bitmask",
    "memory.init",
    "i64x2.extend_high_i32x4_u",
    "f32.ceil",
    "v128.not",
    "local.set",
    "i16x8.min_s",
    "i64.gt_u",
    "table.grow",
    "i32x4.extmul_low_i16x8_u",
    "i32x4.dot_i16x8_s",
    "f64x2.ne",
    "f64x2.splat",
    "i32.load16_s",
    "i16x8.avgr_u",
    "i8x16.sub",
    "i8x16.splat",
    "i64.load",
    "f64.nearest",
    "i8x16.shuffle",
    "f32x4.extract_lane",
    "i64.store16",
    "i8x16.popcnt",
    "f32x4.pmin",
    "i32.shr_u",
    "f64.store",
    "i16x8.max_s",
    "i8x16.min_u",
    "i64x2.gt_s",
    "f64x2.replace_lane",
    "i32.xor",
    "f64x2.lt",
    "i64.trunc_sat_f32_u",
    "i16x8.shl",
    "f32x4.convert_i32x4_u",
    "memory.grow",
    "i32.gt_s",
    "f64.le",
    "f32x4.abs",
    "f32x4.splat",
    "i32.rem_s",
    "i32.div_u",
    "i64.add",
    "v128.andnot",
    "i64x2.extend_high_i32x4_s",
    "i32.sub",
    "i32.ge_u",
    "i8x16.lt_u",
    "i64.trunc_f32_u",
    "i32.le_u",
    "f32x4.gt",
    "i8x16.gt_u",
    "i32.extend16_s",
    "v128.load64_splat",
    "i8x16.shr_u",
    "i16x8.extmul_low_i8x16_s",
    "f32x4.trunc",
    "i8x16.ge_u",
    "i64.lt_u",
    "i32x4.extend_high_i16x8_s",
    "f32x4.sqrt",
    "i32.store16",
    "f64.convert_i64_s",
    "i32x4.min_u",
    "i16x8.extadd_pairwise_i8x16_u",
    "f64.load",
    "i8x16.replace_lane",
    "v128.load32x2_u",
    "i16x8.neg",
    "i64.eqz",
    "select",
    "i32x4.extmul_low_i16x8_s",
    "f32.lt",
    "i16x8.add",
    "i64x2.extmul_low_i32x4_u",
    "i64.trunc_f64_s",
    "i64.extend_i32_u",
    "f32x4.sub",
    "i32.extend8_s",
    "f64.gt",
    "i8x16.eq",
    "i64.rotr",
    "v128.load8x8_u",
    "ref.is_null",
    "i32.gt_u",
    "i16x8.narrow_i32x4_u",
    "f32x4.div",
    "i16x8.extmul_high_i8x16_u",
    "f32.ge",
    "f64x2.max",
    "i16x8.extend_high_i8x16_u",
    "i64x2.ne",
    "i32.shr_s",
    "i64x2.sub",
    "i64.extend16_s",
    "i64.trunc_sat_f32_s",
    "i16x8.add_sat_u",
    "i64.store8",
    "f64x2.gt",
    "i64x2.neg",
    "f64x2.add",
    "i8x16.narrow_i16x8_u",
    "i32x4.extmul_high_i16x8_u",
    "i32x4.le_s",
    "v128.load8_lane",
    "memory.fill",
    "f32x4.floor",
    "i16x8.replace_lane",
    "i8x16.ne",
    "i8x16.shr_s",
    "i32x4.ge_u",
    "i64.load8_u",
    "i64.ge_u",
    "f64.ne",
    "f32.max",
    "f64.trunc",
    "f32x4.nearest",
    "i32.load8_u",
    "i64.sub",
    "i32x4.extadd_pairwise_i16x8_s",
    "f64x2.abs",
    "global.set",
    "i32x4.splat",
    "v128.load32_lane",
    "local.get",
    "ref.null",
    "i64.reinterpret_f64",
    "i64.trunc_sat_f64_u",
    "f64x2.extract_lane",
    "v128.load8_splat",
    "f64x2.eq",
    "f64.reinterpret_i64",
    "f32.load",
    "i8x16.le_s",
    "v128.load32_splat",
    "v128.store8_lane",
    "ref.func",
    "i64.gt_s",
    "f64x2.neg",
    "i16x8.eq",
    "f32.floor",
    "i8x16.neg",
    "global.get",
    "f32.convert_i64_s",
    "i32x4.extract_lane",
    "i64x2.le_s",
    "i8x16.ge_s",
    "f64.convert_i32_s",
    "i32x4.trunc_sat_f32x4_u",
    "i64x2.shr_u",
    "f32x4.eq",
    "i8x16.add_sat_s",
    "i32.trunc_f64_s",
    "v128.store16_lane",
    "f64.ge",
    "f32x4.pmax",
    "local.tee",
    "f32.add",
    "i16x8.all_true",
    "f64.max",
    "i32.wrap_i64",
    "i16x8.splat",
    "i64.div_s",
    "i16x8.extract_lane_s",
    "i32x4.add",
    "f64.ceil",
    "i8x16.extract_lane_s",
    "f64x2.sqrt",
    "f32.convert_i32_u",
    "i64.shr_s",
    "i8x16.sub_sat_u",
    "f32.neg",
    "i16x8.mul",
    "f32.reinterpret_i32",
    "i32.store",
    "i64.mul",
    "i32.trunc_sat_f64_s",
    "v128.load8x8_s",
    "i32x4.neg",
    "i16x8.add_sat_s",
    "i16x8.extadd_pairwise_i8x16_s",
    "i32.le_s",
    "f32.sqrt",
    "i32.trunc_f32_s",
    "i64.extend_i32_s",
    "i16x8.ge_u",
    "f64.copysign",
    "i16x8.lt_u",
    "i32x4.gt_u",
    "i32x4.mul",
    "i32.trunc_f32_u",
    "i64x2.extmul_low_i32x4_s",
    "memory.copy",
    "f64.neg",
    "i64.extend8_s",
    "i32x4.trunc_sat_f64x2_s_zero",
    "i16x8.gt_s",
    "i32.rotl",
    "f64.convert_i32_u",
    "i64x2.extmul_high_i32x4_s",
    "i32.reinterpret_f32",
    "i32.lt_s",
    "i16x8.abs",
    "f32.eq",
    "i64.xor",
    "i8x16.narrow_i16x8_s",
    "v128.const",
    "i32x4.shl",
    "i32.load8_s",
    "i32.or",
    "f64x2.trunc",
    "i32.popcnt",
    "i64.extend32_s",
    "i32x4.extend_low_i16x8_s",
    "memory.size",
    "f64.mul",
    "v128.any_true",
    "i8x16.sub_sat_s",
    "v128.bitselect",
    "f64x2.convert_low_i32x4_u",
    "f32.sub",
    "i64.load16_u",
    "f32.ne",
    "i16x8.narrow_i32x4_s",
    "i8x16.max_s",
    "i64.shl",
    "i16x8.sub_sat_s",
    "f32.mul",
    "i16x8.sub_sat_u",
    "v128.load64_zero",
    "i8x16.avgr_u",
    "f64.sub",
    "drop",
    "i64x2.extract_lane",
    "table.get",
    "i32.mul",
    "i32.load",
    "i64.rotl",
    "v128.load32_zero",
    "i16x8.gt_u",
    "i32.eq",
    "i16x8.ne",
    "v128.load16_lane",
    "f32x4.add",
    "table.init",
    "i16x8.bitmask",
    "i32x4.extadd_pairwise_i16x8_u",
    "table.size",
    "i64.ne",
    "i64.trunc_f32_s",
    "f64.lt",
    "i64x2.lt_s",
    "f64.const",
    "f32x4.neg",
    "f32.demote_f64",
    "i32x4.lt_u",
    "f64.min",
    "v128.or",
    "i32x4.trunc_sat_f64x2_u_zero",
    "i64.const",
    "i64x2.ge_s",
    "f32.nearest",
    "i64.load32_s",
    "i32.rotr",
    "i64.rem_s",
    "i32.clz",
    "i16x8.shr_u",
    "i64x2.extend_low_i32x4_u",
    "f64x2.pmin",
    "i32.ge_s",
    "i64x2.splat",
    "i32x4.replace_lane",
    "i16x8.lt_s",
    "i64x2.add",
    "i16x8.le_u",
    "f64.promote_f32",
    "i32.div_s",
    "i64.load16_s",
    "i16x8.min_u",
    "i64.and",
    "f64.add",
    "i64x2.replace_lane",
    "i64.load8_s",
    "i32.const",
    "i16x8.max_u",
    "i16x8.q15mulr_sat_s",
    "data.drop",
    "f32x4.replace_lane",
    "table.set",
    "i32x4.trunc_sat_f32x4_s",
    "i32.shl",
    "i64.or",
    "i16x8.extmul_high_i8x16_s",
    "i8x16.max_u",
    "i64x2.abs",
    "select_1C~t",
    "v128.load16x4_u",
    "i64x2.shr_s",
    "f32.abs",
    "f64.sqrt",
    "i64x2.eq",
    "i64.ge_s",
    "f32x4.ne",
    "f32.copysign",
    "f64x2.nearest",
    "i32.trunc_sat_f64_u",
    "v128.load64_lane",
    "f32.const",
    "f32x4.max",
    "i32.trunc_sat_f32_s",
    "f32x4.min",
    "f64.floor",
    "i8x16.abs",
    "i32.and",
    "i32x4.all_true",
    "f32.min",
    "f32x4.le",
    "i32x4.ge_s",
    "v128.and",
    "i16x8.ge_s",
    "v128.store",
    "i32x4.sub",
    "f64x2.min",
    "v128.store32_lane",
    "i8x16.shl",
    "i8x16.le_u",
    "f32.convert_i32_s",
    "f64x2.pmax",
    "f32.div",
    "i32x4.min_s",
    "i32x4.max_u",
    "v128.load32x2_s",
    "i32.trunc_sat_f32_u",
    "i32x4.extend_high_i16x8_u",
    "i8x16.min_s",
    "v128.load",
    "i64.store32",
    "f64x2.ge",
    "i64x2.shl",
    "i32x4.gt_s",
    "i64.div_u",
    "table.fill",
    "i32x4.bitmask",
    "f64x2.ceil",
    "i64.lt_s",
    "i16x8.sub",
    "i32x4.abs",
    "i16x8.shr_s",
    "i32.load16_u",
    "f32.le",
    "f64.convert_i64_u",
    "v128.load16x4_s",
    "i64.rem_u",
    "i8x16.add",
    "f64.eq",
    "v128.load16_splat",
    "f32.trunc",
    "i16x8.extend_high_i8x16_s",
    "i64x2.extend_low_i32x4_s",
    "v128.xor",
    "i64.le_s",
    "i32.lt_u",
    "i16x8.extend_low_i8x16_u",
    "f32x4.mul",
    "f32.convert_i64_u",
    "i32x4.extend_low_i16x8_u",
    "i64.popcnt",
    "f32x4.lt",
    "i32x4.shr_s",
    "f64.abs"
]