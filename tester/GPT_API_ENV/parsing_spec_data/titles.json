[
    "text modules Modules",
    "text modules Modules Indices",
    "text modules Modules Types",
    "text modules Modules Type Uses",
    "text modules Modules Type Uses Abbreviations",
    "text modules Modules Imports",
    "text modules Modules Imports Abbreviations",
    "text modules Modules Functions",
    "text modules Modules Functions Abbreviations",
    "text modules Modules Tables",
    "text modules Modules Tables Abbreviations",
    "text modules Modules Memories",
    "text modules Modules Memories Abbreviations",
    "text modules Modules Globals",
    "text modules Modules Globals Abbreviations",
    "text modules Modules Exports",
    "text modules Modules Exports Abbreviations",
    "text modules Modules Start Function",
    "text modules Modules Element Segments",
    "text modules Modules Element Segments Abbreviations",
    "text modules Modules Data Segments",
    "text modules Modules Data Segments Abbreviations",
    "text modules Modules Modules",
    "text modules Modules Modules Abbreviations",
    "appendix implementation Implementation Limitations",
    "appendix implementation Implementation Limitations Syntactic Limits",
    "appendix implementation Implementation Limitations Syntactic Limits Structure",
    "appendix implementation Implementation Limitations Syntactic Limits Binary Format",
    "appendix implementation Implementation Limitations Syntactic Limits Text Format",
    "appendix implementation Implementation Limitations Validation",
    "appendix implementation Implementation Limitations Execution",
    "appendix custom Custom Sections",
    "appendix custom Custom Sections Name Section",
    "appendix custom Custom Sections Name Section Subsections",
    "appendix custom Custom Sections Name Section Name Maps",
    "appendix custom Custom Sections Name Section Module Names",
    "appendix custom Custom Sections Name Section Function Names",
    "appendix custom Custom Sections Name Section Local Names",
    "text lexical Lexical Format",
    "text lexical Lexical Format Characters",
    "text lexical Lexical Format Tokens",
    "text lexical Lexical Format White Space",
    "text lexical Lexical Format Comments",
    "syntax modules Modules",
    "syntax modules Modules Indices",
    "syntax modules Modules Indices Conventions",
    "syntax modules Modules Types",
    "syntax modules Modules Functions",
    "syntax modules Modules Tables",
    "syntax modules Modules Memories",
    "syntax modules Modules Globals",
    "syntax modules Modules Element Segments",
    "syntax modules Modules Data Segments",
    "syntax modules Modules Start Function",
    "syntax modules Modules Exports",
    "syntax modules Modules Exports Conventions",
    "syntax modules Modules Imports",
    "text instructions Instructions",
    "text instructions Instructions Labels",
    "text instructions Instructions Control Instructions",
    "text instructions Instructions Control Instructions Abbreviations",
    "text instructions Instructions Reference Instructions",
    "text instructions Instructions Parametric Instructions",
    "text instructions Instructions Variable Instructions",
    "text instructions Instructions Table Instructions",
    "text instructions Instructions Table Instructions Abbreviations",
    "text instructions Instructions Memory Instructions",
    "text instructions Instructions Numeric Instructions",
    "text instructions Instructions Vector Instructions",
    "text instructions Instructions Folded Instructions",
    "text instructions Instructions Expressions",
    "text conventions Conventions",
    "text conventions Conventions Grammar",
    "text conventions Conventions Abbreviations",
    "text conventions Conventions Contexts",
    "text conventions Conventions Contexts Conventions",
    "text conventions Conventions Vectors",
    "appendix index Appendix",
    "binary instructions Instructions",
    "binary instructions Instructions Control Instructions",
    "binary instructions Instructions Reference Instructions",
    "binary instructions Instructions Parametric Instructions",
    "binary instructions Instructions Variable Instructions",
    "binary instructions Instructions Table Instructions",
    "binary instructions Instructions Memory Instructions",
    "binary instructions Instructions Numeric Instructions",
    "binary instructions Instructions Vector Instructions",
    "binary instructions Instructions Expressions",
    "exec instructions Instructions",
    "exec instructions Instructions Numeric Instructions",
    "exec instructions Instructions Numeric Instructions t.const~c",
    "exec instructions Instructions Numeric Instructions t.unop",
    "exec instructions Instructions Numeric Instructions t.binop",
    "exec instructions Instructions Numeric Instructions t.testop",
    "exec instructions Instructions Numeric Instructions t.relop",
    "exec instructions Instructions Numeric Instructions t_2.cvtop\\_t_1\\_sx^?",
    "exec instructions Instructions Reference Instructions",
    "exec instructions Instructions Reference Instructions ref{.null}~t",
    "exec instructions Instructions Reference Instructions ref{.is\\_null}",
    "exec instructions Instructions Reference Instructions ref{.func}~x",
    "exec instructions Instructions Vector Instructions",
    "exec instructions Instructions Vector Instructions v128.const~c",
    "exec instructions Instructions Vector Instructions v128.vvunop",
    "exec instructions Instructions Vector Instructions v128.vvbinop",
    "exec instructions Instructions Vector Instructions v128.vvternop",
    "exec instructions Instructions Vector Instructions v128.any\\_true",
    "exec instructions Instructions Vector Instructions i8x16.swizzle",
    "exec instructions Instructions Vector Instructions i8x16.shuffle~x^\\ast",
    "exec instructions Instructions Vector Instructions shape.splat",
    "exec instructions Instructions Vector Instructions t_1xN.extract\\_lane\\_sx^?~x",
    "exec instructions Instructions Vector Instructions shape.replace\\_lane~x",
    "exec instructions Instructions Vector Instructions shape.vunop",
    "exec instructions Instructions Vector Instructions shape.vbinop",
    "exec instructions Instructions Vector Instructions txN.vrelop",
    "exec instructions Instructions Vector Instructions txN.vishiftop",
    "exec instructions Instructions Vector Instructions shape.all\\_true",
    "exec instructions Instructions Vector Instructions txN.bitmask",
    "exec instructions Instructions Vector Instructions t_2xN.narrow\\_t_1xM\\_sx",
    "exec instructions Instructions Vector Instructions t_2xN.vcvtop\\_t_1xM\\_sx",
    "exec instructions Instructions Vector Instructions t_2xN.vcvtop\\_half\\_t_1xM\\_sx^?",
    "exec instructions Instructions Vector Instructions t_2xN.vcvtop\\_t_1xM\\_sx\\_zero",
    "exec instructions Instructions Vector Instructions i32x4.dot\\_i16x8\\_s",
    "exec instructions Instructions Vector Instructions t_2xN.extmul\\_half\\_t_1xM\\_sx",
    "exec instructions Instructions Vector Instructions t_2xN.extadd\\_pairwise\\_t_1xM\\_sx",
    "exec instructions Instructions Parametric Instructions",
    "exec instructions Instructions Parametric Instructions drop",
    "exec instructions Instructions Parametric Instructions select~(t^\\ast)^?",
    "exec instructions Instructions Variable Instructions",
    "exec instructions Instructions Variable Instructions local.get~x",
    "exec instructions Instructions Variable Instructions local.set~x",
    "exec instructions Instructions Variable Instructions local.tee~x",
    "exec instructions Instructions Variable Instructions global.get~x",
    "exec instructions Instructions Variable Instructions global.set~x",
    "exec instructions Instructions Table Instructions",
    "exec instructions Instructions Table Instructions table.get~x",
    "exec instructions Instructions Table Instructions table.set~x",
    "exec instructions Instructions Table Instructions table.size~x",
    "exec instructions Instructions Table Instructions table.grow~x",
    "exec instructions Instructions Table Instructions table.fill~x",
    "exec instructions Instructions Table Instructions table.copy~x~y",
    "exec instructions Instructions Table Instructions table.init~x~y",
    "exec instructions Instructions Table Instructions elem.drop~x",
    "exec instructions Instructions Memory Instructions",
    "exec instructions Instructions Memory Instructions t.load~memarg and t.load{N}\\_sx~memarg",
    "exec instructions Instructions Memory Instructions v128.load{M}xN\\_sx~memarg",
    "exec instructions Instructions Memory Instructions v128.load{N}\\_splat~memarg",
    "exec instructions Instructions Memory Instructions v128.load{N}\\_zero~memarg",
    "exec instructions Instructions Memory Instructions v128.load{N}\\_lane~memarg~x",
    "exec instructions Instructions Memory Instructions t.store~memarg and t.store{N}~memarg",
    "exec instructions Instructions Memory Instructions v128.store{N}\\_lane~memarg~x",
    "exec instructions Instructions Memory Instructions memory.size",
    "exec instructions Instructions Memory Instructions memory.grow",
    "exec instructions Instructions Memory Instructions memory.fill",
    "exec instructions Instructions Memory Instructions memory.copy",
    "exec instructions Instructions Memory Instructions memory.init~x",
    "exec instructions Instructions Memory Instructions data.drop~x",
    "exec instructions Instructions Control Instructions",
    "exec instructions Instructions Control Instructions nop",
    "exec instructions Instructions Control Instructions unreachable",
    "exec instructions Instructions Control Instructions block~blocktype~instr^\\ast~end",
    "exec instructions Instructions Control Instructions loop~blocktype~instr^\\ast~end",
    "exec instructions Instructions Control Instructions if~blocktype~instr_1^\\ast~else~instr_2^\\ast~end",
    "exec instructions Instructions Control Instructions br~l",
    "exec instructions Instructions Control Instructions br\\_if~l",
    "exec instructions Instructions Control Instructions br\\_table~l^\\ast~l_N",
    "exec instructions Instructions Control Instructions return",
    "exec instructions Instructions Control Instructions call~x",
    "exec instructions Instructions Control Instructions call\\_indirect~x~y",
    "exec instructions Instructions Blocks",
    "exec instructions Instructions Blocks Entering instr^\\ast with label L",
    "exec instructions Instructions Blocks Exiting instr^\\ast with label L",
    "exec instructions Instructions Function Calls",
    "exec instructions Instructions Function Calls Invocation of function address a",
    "exec instructions Instructions Function Calls Returning from a function",
    "exec instructions Instructions Function Calls Host Functions",
    "exec instructions Instructions Expressions",
    "valid instructions Instructions",
    "valid instructions Instructions Numeric Instructions",
    "valid instructions Instructions Numeric Instructions t.const~c",
    "valid instructions Instructions Numeric Instructions t.unop",
    "valid instructions Instructions Numeric Instructions t.binop",
    "valid instructions Instructions Numeric Instructions t.testop",
    "valid instructions Instructions Numeric Instructions t.relop",
    "valid instructions Instructions Numeric Instructions t_2.cvtop\\_t_1\\_sx^?",
    "valid instructions Instructions Reference Instructions",
    "valid instructions Instructions Reference Instructions ref{.null}~t",
    "valid instructions Instructions Reference Instructions ref{.is\\_null}",
    "valid instructions Instructions Reference Instructions ref{.func}~x",
    "valid instructions Instructions Vector Instructions",
    "valid instructions Instructions Vector Instructions v128.const~c",
    "valid instructions Instructions Vector Instructions v128.vvunop",
    "valid instructions Instructions Vector Instructions v128.vvbinop",
    "valid instructions Instructions Vector Instructions v128.vvternop",
    "valid instructions Instructions Vector Instructions v128.vvtestop",
    "valid instructions Instructions Vector Instructions i8x16.swizzle",
    "valid instructions Instructions Vector Instructions i8x16.shuffle~laneidx^{16}",
    "valid instructions Instructions Vector Instructions shape.splat",
    "valid instructions Instructions Vector Instructions shape.extract\\_lane\\_sx^?~laneidx",
    "valid instructions Instructions Vector Instructions shape.replace\\_lane~laneidx",
    "valid instructions Instructions Vector Instructions shape.vunop",
    "valid instructions Instructions Vector Instructions shape.vbinop",
    "valid instructions Instructions Vector Instructions shape.vrelop",
    "valid instructions Instructions Vector Instructions ishape.vishiftop",
    "valid instructions Instructions Vector Instructions shape.vtestop",
    "valid instructions Instructions Vector Instructions shape.vcvtop\\_half^?\\_shape\\_sx^?\\_zero^?",
    "valid instructions Instructions Vector Instructions ishape_1.narrow\\_ishape_2\\_sx",
    "valid instructions Instructions Vector Instructions ishape.bitmask",
    "valid instructions Instructions Vector Instructions ishape_1.dot\\_ishape_2\\_s",
    "valid instructions Instructions Vector Instructions ishape_1.extmul\\_half\\_ishape_2\\_sx",
    "valid instructions Instructions Vector Instructions ishape_1.extadd\\_pairwise\\_ishape_2\\_sx",
    "valid instructions Instructions Parametric Instructions",
    "valid instructions Instructions Parametric Instructions drop",
    "valid instructions Instructions Parametric Instructions select~(t^\\ast)^?",
    "valid instructions Instructions Variable Instructions",
    "valid instructions Instructions Variable Instructions local.get~x",
    "valid instructions Instructions Variable Instructions local.set~x",
    "valid instructions Instructions Variable Instructions local.tee~x",
    "valid instructions Instructions Variable Instructions global.get~x",
    "valid instructions Instructions Variable Instructions global.set~x",
    "valid instructions Instructions Table Instructions",
    "valid instructions Instructions Table Instructions table.get~x",
    "valid instructions Instructions Table Instructions table.set~x",
    "valid instructions Instructions Table Instructions table.size~x",
    "valid instructions Instructions Table Instructions table.grow~x",
    "valid instructions Instructions Table Instructions table.fill~x",
    "valid instructions Instructions Table Instructions table.copy~x~y",
    "valid instructions Instructions Table Instructions table.init~x~y",
    "valid instructions Instructions Table Instructions elem.drop~x",
    "valid instructions Instructions Memory Instructions",
    "valid instructions Instructions Memory Instructions t.load~memarg",
    "valid instructions Instructions Memory Instructions t.load{N}\\_sx~memarg",
    "valid instructions Instructions Memory Instructions t.store~memarg",
    "valid instructions Instructions Memory Instructions t.store{N}~memarg",
    "valid instructions Instructions Memory Instructions v128.load{N}xM\\_sx~memarg",
    "valid instructions Instructions Memory Instructions v128.load{N}\\_splat~memarg",
    "valid instructions Instructions Memory Instructions v128.load{N}\\_zero~memarg",
    "valid instructions Instructions Memory Instructions v128.load{N}\\_lane~memarg~laneidx",
    "valid instructions Instructions Memory Instructions v128.store{N}\\_lane~memarg~laneidx",
    "valid instructions Instructions Memory Instructions memory.size",
    "valid instructions Instructions Memory Instructions memory.grow",
    "valid instructions Instructions Memory Instructions memory.fill",
    "valid instructions Instructions Memory Instructions memory.copy",
    "valid instructions Instructions Memory Instructions memory.init~x",
    "valid instructions Instructions Memory Instructions data.drop~x",
    "valid instructions Instructions Control Instructions",
    "valid instructions Instructions Control Instructions nop",
    "valid instructions Instructions Control Instructions unreachable",
    "valid instructions Instructions Control Instructions block~blocktype~instr^\\ast~end",
    "valid instructions Instructions Control Instructions loop~blocktype~instr^\\ast~end",
    "valid instructions Instructions Control Instructions if~blocktype~instr_1^\\ast~else~instr_2^\\ast~end",
    "valid instructions Instructions Control Instructions br~l",
    "valid instructions Instructions Control Instructions br\\_if~l",
    "valid instructions Instructions Control Instructions br\\_table~l^\\ast~l_N",
    "valid instructions Instructions Control Instructions return",
    "valid instructions Instructions Control Instructions call~x",
    "valid instructions Instructions Control Instructions call\\_indirect~x~y",
    "valid instructions Instructions Instruction Sequences",
    "valid instructions Instructions Instruction Sequences Empty Instruction Sequence: \\epsilon",
    "valid instructions Instructions Instruction Sequences Non-empty Instruction Sequence: instr^\\ast~instr_N",
    "valid instructions Instructions Expressions",
    "valid instructions Instructions Expressions instr^\\ast~end",
    "valid instructions Instructions Expressions Constant Expressions",
    "appendix index-instructions Index of Instructions",
    "text values Values",
    "text values Values Integers",
    "text values Values Floating-Point",
    "text values Values Strings",
    "text values Values Names",
    "text values Values Identifiers",
    "text values Values Identifiers Conventions",
    "binary modules Modules",
    "binary modules Modules Indices",
    "binary modules Modules Sections",
    "binary modules Modules Custom Section",
    "binary modules Modules Type Section",
    "binary modules Modules Import Section",
    "binary modules Modules Function Section",
    "binary modules Modules Table Section",
    "binary modules Modules Memory Section",
    "binary modules Modules Global Section",
    "binary modules Modules Export Section",
    "binary modules Modules Start Section",
    "binary modules Modules Element Section",
    "binary modules Modules Code Section",
    "binary modules Modules Data Section",
    "binary modules Modules Data Count Section",
    "binary modules Modules Modules",
    "syntax index Structure",
    "exec conventions Conventions",
    "exec conventions Conventions Prose Notation",
    "exec conventions Conventions Formal Notation",
    "appendix index-rules Index of Semantic Rules",
    "appendix index-rules Index of Semantic Rules Typing of Static Constructs",
    "appendix index-rules Index of Semantic Rules Typing of Runtime Constructs",
    "appendix index-rules Index of Semantic Rules Constantness",
    "appendix index-rules Index of Semantic Rules Matching",
    "appendix index-rules Index of Semantic Rules Store Extension",
    "appendix index-rules Index of Semantic Rules Execution",
    "valid modules Modules",
    "valid modules Modules Functions",
    "valid modules Modules Functions \\{ type~x, locals~t^\\ast, body~expr \\}",
    "valid modules Modules Tables",
    "valid modules Modules Tables \\{ type~tabletype \\}",
    "valid modules Modules Memories",
    "valid modules Modules Memories \\{ type~memtype \\}",
    "valid modules Modules Globals",
    "valid modules Modules Globals \\{ type~mut~t, init~expr \\}",
    "valid modules Modules Element Segments",
    "valid modules Modules Element Segments \\{ type~t, init~e^\\ast, mode~elemmode \\}",
    "valid modules Modules Element Segments passive",
    "valid modules Modules Element Segments active~\\{ table~x, offset~expr \\}",
    "valid modules Modules Element Segments declarative",
    "valid modules Modules Data Segments",
    "valid modules Modules Data Segments \\{ init~b^\\ast, mode~datamode \\}",
    "valid modules Modules Data Segments passive",
    "valid modules Modules Data Segments active~\\{ memory~x, offset~expr \\}",
    "valid modules Modules Start Function",
    "valid modules Modules Start Function \\{ func~x \\}",
    "valid modules Modules Exports",
    "valid modules Modules Exports \\{ name~name, desc~exportdesc \\}",
    "valid modules Modules Exports func~x",
    "valid modules Modules Exports table~x",
    "valid modules Modules Exports mem~x",
    "valid modules Modules Exports global~x",
    "valid modules Modules Imports",
    "valid modules Modules Imports \\{ module~name_1, name~name_2, desc~importdesc \\}",
    "valid modules Modules Imports func~x",
    "valid modules Modules Imports table~tabletype",
    "valid modules Modules Imports mem~memtype",
    "valid modules Modules Imports global~globaltype",
    "valid modules Modules Modules",
    "appendix algorithm Validation Algorithm",
    "appendix algorithm Validation Algorithm Data Structures",
    "appendix algorithm Validation Algorithm Validation of Opcode Sequences",
    "intro overview Overview",
    "intro overview Overview Concepts",
    "intro overview Overview Semantic Phases",
    "valid types Types",
    "valid types Types Limits",
    "valid types Types Limits \\{ min~n, max~m^? \\}",
    "valid types Types Block Types",
    "valid types Types Block Types typeidx",
    "valid types Types Block Types [valtype^?]",
    "valid types Types Function Types",
    "valid types Types Function Types [t_1^n] \\rightarrow [t_2^m]",
    "valid types Types Table Types",
    "valid types Types Table Types limits~reftype",
    "valid types Types Memory Types",
    "valid types Types Memory Types limits",
    "valid types Types Global Types",
    "valid types Types Global Types mut~valtype",
    "valid types Types External Types",
    "valid types Types External Types func~functype",
    "valid types Types External Types table~tabletype",
    "valid types Types External Types mem~memtype",
    "valid types Types External Types global~globaltype",
    "valid types Types Import Subtyping",
    "valid types Types Import Subtyping Limits",
    "valid types Types Import Subtyping Functions",
    "valid types Types Import Subtyping Tables",
    "valid types Types Import Subtyping Memories",
    "valid types Types Import Subtyping Globals",
    "appendix properties Soundness",
    "appendix properties Soundness Results",
    "appendix properties Soundness Results Results val^\\ast",
    "appendix properties Soundness Results Results trap",
    "appendix properties Soundness Store Validity",
    "appendix properties Soundness Store Validity Store S",
    "appendix properties Soundness Store Validity Function Instances \\{type~functype, module~moduleinst, code~func\\}",
    "appendix properties Soundness Store Validity Host Function Instances \\{type~functype, hostcode~hf\\}",
    "appendix properties Soundness Store Validity Table Instances \\{ type~(limits~t), elem~ref^\\ast \\}",
    "appendix properties Soundness Store Validity Memory Instances \\{ type~limits, data~b^\\ast \\}",
    "appendix properties Soundness Store Validity Global Instances \\{ type~(mut~t), value~val \\}",
    "appendix properties Soundness Store Validity Element Instances \\{ elem~fa^\\ast \\}",
    "appendix properties Soundness Store Validity Data Instances \\{ data~b^\\ast \\}",
    "appendix properties Soundness Store Validity Export Instances \\{ name~name, value~externval \\}",
    "appendix properties Soundness Store Validity Module Instances moduleinst",
    "appendix properties Soundness Configuration Validity",
    "appendix properties Soundness Configuration Validity Configurations S;T",
    "appendix properties Soundness Configuration Validity Threads F;instr^\\ast",
    "appendix properties Soundness Configuration Validity Frames \\{locals~val^\\ast, module~moduleinst\\}",
    "appendix properties Soundness Administrative Instructions",
    "appendix properties Soundness Administrative Instructions trap",
    "appendix properties Soundness Administrative Instructions ref{.extern}~externaddr",
    "appendix properties Soundness Administrative Instructions ref~funcaddr",
    "appendix properties Soundness Administrative Instructions invoke~funcaddr",
    "appendix properties Soundness Administrative Instructions label_n\\{instr_0^\\ast\\}~instr^\\ast~end",
    "appendix properties Soundness Administrative Instructions frame_n\\{F\\}~instr^\\ast~end",
    "appendix properties Soundness Store Extension",
    "appendix properties Soundness Store Extension Store S",
    "appendix properties Soundness Store Extension Function Instance funcinst",
    "appendix properties Soundness Store Extension Table Instance tableinst",
    "appendix properties Soundness Store Extension Memory Instance meminst",
    "appendix properties Soundness Store Extension Global Instance globalinst",
    "appendix properties Soundness Store Extension Element Instance eleminst",
    "appendix properties Soundness Store Extension Data Instance datainst",
    "appendix properties Soundness Theorems",
    "syntax instructions Instructions",
    "syntax instructions Instructions Numeric Instructions",
    "syntax instructions Instructions Numeric Instructions Conventions",
    "syntax instructions Instructions Vector Instructions",
    "syntax instructions Instructions Vector Instructions Conventions",
    "syntax instructions Instructions Reference Instructions",
    "syntax instructions Instructions Parametric Instructions",
    "syntax instructions Instructions Variable Instructions",
    "syntax instructions Instructions Table Instructions",
    "syntax instructions Instructions Memory Instructions",
    "syntax instructions Instructions Control Instructions",
    "syntax instructions Instructions Expressions",
    "appendix embedding Embedding",
    "appendix embedding Embedding Types",
    "appendix embedding Embedding Errors",
    "appendix embedding Embedding Pre- and Post-Conditions",
    "appendix embedding Embedding Store",
    "appendix embedding Embedding Store store\\_init() : store",
    "appendix embedding Embedding Modules",
    "appendix embedding Embedding Modules module\\_decode(byte^\\ast) : module ~|~ error",
    "appendix embedding Embedding Modules module\\_parse(char^\\ast) : module ~|~ error",
    "appendix embedding Embedding Modules module\\_validate(module) : error^?",
    "appendix embedding Embedding Modules module\\_instantiate(store, module, externval^\\ast) : (store, moduleinst ~|~ error)",
    "appendix embedding Embedding Modules module\\_imports(module) : (name, name, externtype)^\\ast",
    "appendix embedding Embedding Modules module\\_exports(module) : (name, externtype)^\\ast",
    "appendix embedding Embedding Module Instances",
    "appendix embedding Embedding Module Instances instance\\_export(moduleinst, name) : externval ~|~ error",
    "appendix embedding Embedding Functions",
    "appendix embedding Embedding Functions func\\_alloc(store, functype, hostfunc) : (store, funcaddr)",
    "appendix embedding Embedding Functions func\\_type(store, funcaddr) : functype",
    "appendix embedding Embedding Functions func\\_invoke(store, funcaddr, val^\\ast) : (store, val^\\ast ~|~ error)",
    "appendix embedding Embedding Tables",
    "appendix embedding Embedding Tables table\\_alloc(store, tabletype) : (store, tableaddr, ref)",
    "appendix embedding Embedding Tables table\\_type(store, tableaddr) : tabletype",
    "appendix embedding Embedding Tables table\\_read(store, tableaddr, i:u32) : ref ~|~ error",
    "appendix embedding Embedding Tables table\\_write(store, tableaddr, i:u32, ref) : store ~|~ error",
    "appendix embedding Embedding Tables table\\_size(store, tableaddr) : u32",
    "appendix embedding Embedding Tables table\\_grow(store, tableaddr, n:u32, ref) : store ~|~ error",
    "appendix embedding Embedding Memories",
    "appendix embedding Embedding Memories mem\\_alloc(store, memtype) : (store, memaddr)",
    "appendix embedding Embedding Memories mem\\_type(store, memaddr) : memtype",
    "appendix embedding Embedding Memories mem\\_read(store, memaddr, i:u32) : byte ~|~ error",
    "appendix embedding Embedding Memories mem\\_write(store, memaddr, i:u32, byte) : store ~|~ error",
    "appendix embedding Embedding Memories mem\\_size(store, memaddr) : u32",
    "appendix embedding Embedding Memories mem\\_grow(store, memaddr, n:u32) : store ~|~ error",
    "appendix embedding Embedding Globals",
    "appendix embedding Embedding Globals global\\_alloc(store, globaltype, val) : (store, globaladdr)",
    "appendix embedding Embedding Globals global\\_type(store, globaladdr) : globaltype",
    "appendix embedding Embedding Globals global\\_read(store, globaladdr) : val",
    "appendix embedding Embedding Globals global\\_write(store, globaladdr, val) : store ~|~ error",
    "exec numerics Numerics",
    "exec numerics Numerics Representations",
    "exec numerics Numerics Representations Integers",
    "exec numerics Numerics Representations Floating-Point",
    "exec numerics Numerics Representations Storage",
    "exec numerics Numerics Representations Vectors",
    "exec numerics Numerics Integer Operations",
    "exec numerics Numerics Integer Operations Sign Interpretation",
    "exec numerics Numerics Integer Operations Boolean Interpretation",
    "exec numerics Numerics Integer Operations iadd_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations isub_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations imul_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations idiv\\_u_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations idiv\\_s_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations irem\\_u_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations irem\\_s_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations inot_N(i)",
    "exec numerics Numerics Integer Operations iand_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations iandnot_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations ior_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations ixor_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations ishl_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations ishr\\_u_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations ishr\\_s_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations irotl_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations irotr_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations iclz_N(i)",
    "exec numerics Numerics Integer Operations ictz_N(i)",
    "exec numerics Numerics Integer Operations ipopcnt_N(i)",
    "exec numerics Numerics Integer Operations ieqz_N(i)",
    "exec numerics Numerics Integer Operations ieq_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations ine_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations ilt\\_u_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations ilt\\_s_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations igt\\_u_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations igt\\_s_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations ile\\_u_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations ile\\_s_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations ige\\_u_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations ige\\_s_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations iextendM\\_s_N(i)",
    "exec numerics Numerics Integer Operations ibitselect_N(i_1, i_2, i_3)",
    "exec numerics Numerics Integer Operations iabs_N(i)",
    "exec numerics Numerics Integer Operations ineg_N(i)",
    "exec numerics Numerics Integer Operations imin\\_u_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations imin\\_s_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations imax\\_u_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations imax\\_s_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations iaddsat\\_u_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations iaddsat\\_s_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations isubsat\\_u_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations isubsat\\_s_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations iavgr\\_u_N(i_1, i_2)",
    "exec numerics Numerics Integer Operations iq15mulrsat\\_s_N(i_1, i_2)",
    "exec numerics Numerics Floating-Point Operations",
    "exec numerics Numerics Floating-Point Operations Rounding",
    "exec numerics Numerics Floating-Point Operations NaN Propagation",
    "exec numerics Numerics Floating-Point Operations fadd_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations fsub_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations fmul_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations fdiv_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations fmin_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations fmax_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations fcopysign_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations fabs_N(z)",
    "exec numerics Numerics Floating-Point Operations fneg_N(z)",
    "exec numerics Numerics Floating-Point Operations fsqrt_N(z)",
    "exec numerics Numerics Floating-Point Operations fceil_N(z)",
    "exec numerics Numerics Floating-Point Operations ffloor_N(z)",
    "exec numerics Numerics Floating-Point Operations ftrunc_N(z)",
    "exec numerics Numerics Floating-Point Operations fnearest_N(z)",
    "exec numerics Numerics Floating-Point Operations feq_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations fne_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations flt_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations fgt_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations fle_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations fge_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations fpmin_N(z_1, z_2)",
    "exec numerics Numerics Floating-Point Operations fpmax_N(z_1, z_2)",
    "exec numerics Numerics Conversions",
    "exec numerics Numerics Conversions extend^{u}_{M,N}(i)",
    "exec numerics Numerics Conversions extend^{s}_{M,N}(i)",
    "exec numerics Numerics Conversions wrap_{M,N}(i)",
    "exec numerics Numerics Conversions trunc^{u}_{M,N}(z)",
    "exec numerics Numerics Conversions trunc^{s}_{M,N}(z)",
    "exec numerics Numerics Conversions trunc\\_sat\\_u_{M,N}(z)",
    "exec numerics Numerics Conversions trunc\\_sat\\_s_{M,N}(z)",
    "exec numerics Numerics Conversions promote_{M,N}(z)",
    "exec numerics Numerics Conversions demote_{M,N}(z)",
    "exec numerics Numerics Conversions convert^{u}_{M,N}(i)",
    "exec numerics Numerics Conversions convert^{s}_{M,N}(i)",
    "exec numerics Numerics Conversions reinterpret_{t_1,t_2}(c)",
    "exec numerics Numerics Conversions narrow^{s}_{M,N}(i)",
    "exec numerics Numerics Conversions narrow^{u}_{M,N}(i)",
    "valid conventions Conventions",
    "valid conventions Conventions Contexts",
    "valid conventions Conventions Prose Notation",
    "valid conventions Conventions Formal Notation",
    "appendix index-types Index of Types",
    "exec modules Modules",
    "exec modules Modules External Typing",
    "exec modules Modules External Typing func~a",
    "exec modules Modules External Typing table~a",
    "exec modules Modules External Typing mem~a",
    "exec modules Modules External Typing global~a",
    "exec modules Modules Value Typing",
    "exec modules Modules Value Typing Numeric Values t.const~c",
    "exec modules Modules Value Typing Null References ref{.null}~t",
    "exec modules Modules Value Typing Function References ref~a",
    "exec modules Modules Value Typing External References ref{.extern}~a",
    "exec modules Modules Allocation",
    "exec modules Modules Allocation Functions",
    "exec modules Modules Allocation Host Functions",
    "exec modules Modules Allocation Tables",
    "exec modules Modules Allocation Memories",
    "exec modules Modules Allocation Globals",
    "exec modules Modules Allocation Element segments",
    "exec modules Modules Allocation Data segments",
    "exec modules Modules Allocation Growing tables",
    "exec modules Modules Allocation Growing memories",
    "exec modules Modules Allocation Modules",
    "exec modules Modules Instantiation",
    "exec modules Modules Invocation",
    "index WebAssembly Specification",
    "syntax values Values",
    "syntax values Values Bytes",
    "syntax values Values Bytes Conventions",
    "syntax values Values Integers",
    "syntax values Values Integers Conventions",
    "syntax values Values Floating-Point",
    "syntax values Values Floating-Point Conventions",
    "syntax values Values Vectors",
    "syntax values Values Names",
    "syntax values Values Names Convention",
    "appendix changes Change History",
    "appendix changes Change History Release 2.0",
    "appendix changes Change History Release 2.0 Sign extension instructions",
    "appendix changes Change History Release 2.0 Non-trapping float-to-int conversions",
    "appendix changes Change History Release 2.0 Multiple values",
    "appendix changes Change History Release 2.0 Reference types",
    "appendix changes Change History Release 2.0 Table instructions",
    "appendix changes Change History Release 2.0 Multiple tables",
    "appendix changes Change History Release 2.0 Bulk memory and table instructions",
    "appendix changes Change History Release 2.0 Vector instructions",
    "text types Types",
    "text types Types Number Types",
    "text types Types Vector Types",
    "text types Types Reference Types",
    "text types Types Value Types",
    "text types Types Function Types",
    "text types Types Function Types Abbreviations",
    "text types Types Limits",
    "text types Types Memory Types",
    "text types Types Table Types",
    "text types Types Global Types",
    "binary index Binary Format",
    "binary types Types",
    "binary types Types Number Types",
    "binary types Types Vector Types",
    "binary types Types Reference Types",
    "binary types Types Value Types",
    "binary types Types Result Types",
    "binary types Types Function Types",
    "binary types Types Limits",
    "binary types Types Memory Types",
    "binary types Types Table Types",
    "binary types Types Global Types",
    "exec runtime Runtime Structure",
    "exec runtime Runtime Structure Values",
    "exec runtime Runtime Structure Values Convention",
    "exec runtime Runtime Structure Results",
    "exec runtime Runtime Structure Store",
    "exec runtime Runtime Structure Store Convention",
    "exec runtime Runtime Structure Addresses",
    "exec runtime Runtime Structure Module Instances",
    "exec runtime Runtime Structure Function Instances",
    "exec runtime Runtime Structure Table Instances",
    "exec runtime Runtime Structure Memory Instances",
    "exec runtime Runtime Structure Global Instances",
    "exec runtime Runtime Structure Element Instances",
    "exec runtime Runtime Structure Data Instances",
    "exec runtime Runtime Structure Export Instances",
    "exec runtime Runtime Structure External Values",
    "exec runtime Runtime Structure External Values Conventions",
    "exec runtime Runtime Structure Stack",
    "exec runtime Runtime Structure Stack Values",
    "exec runtime Runtime Structure Stack Labels",
    "exec runtime Runtime Structure Stack Activations and Frames",
    "exec runtime Runtime Structure Stack Conventions",
    "exec runtime Runtime Structure Administrative Instructions",
    "exec runtime Runtime Structure Administrative Instructions Block Contexts",
    "exec runtime Runtime Structure Administrative Instructions Configurations",
    "exec runtime Runtime Structure Administrative Instructions Evaluation Contexts",
    "valid index Validation",
    "binary values Values",
    "binary values Values Bytes",
    "binary values Values Integers",
    "binary values Values Floating-Point",
    "binary values Values Names",
    "intro index Introduction",
    "syntax types Types",
    "syntax types Types Number Types",
    "syntax types Types Number Types Conventions",
    "syntax types Types Vector Types",
    "syntax types Types Vector Types Conventions",
    "syntax types Types Reference Types",
    "syntax types Types Value Types",
    "syntax types Types Value Types Conventions",
    "syntax types Types Result Types",
    "syntax types Types Function Types",
    "syntax types Types Limits",
    "syntax types Types Memory Types",
    "syntax types Types Table Types",
    "syntax types Types Global Types",
    "syntax types Types External Types",
    "syntax types Types External Types Conventions",
    "exec index Execution",
    "intro introduction Introduction",
    "intro introduction Introduction Design Goals",
    "intro introduction Introduction Scope",
    "intro introduction Introduction Security Considerations",
    "intro introduction Introduction Dependencies",
    "binary conventions Conventions",
    "binary conventions Conventions Grammar",
    "binary conventions Conventions Auxiliary Notation",
    "binary conventions Conventions Vectors",
    "text index Text Format",
    "syntax conventions Conventions",
    "syntax conventions Conventions Grammar Notation",
    "syntax conventions Conventions Auxiliary Notation",
    "syntax conventions Conventions Vectors"
]