Take the instruction  global.set~x as an example,
Given the following instruction information 


{
    "concrete instruciton name": "i32.store",
    "instruction format": "t.store~memarg and t.storeN~memarg",
    "validation_description": "valid instructions Instructions Memory Instructions t.store~memarg\nThe memory C.mems[0] must be defined in the context.\n\nThe alignment 2^{memarg.align} must not be larger than the bit width of t divided by 8.\n\nThen the instruction is valid with type [i32~t] \\rightarrow [].\n\n\\frac{\n  C.mems[0] = memtype\n  \\qquad\n  2^{memarg.align} \\leq |t|/8\n}{\n  C \\vdash t.store~memarg : [i32~t] \\rightarrow []\n}",
    "execution_description": "exec instructions Instructions Memory Instructions t.store~memarg and t.store{N}~memarg\nLet F be the current frame.\n\nAssert: due to validation, F.module.memaddrs[0] exists.\n\nLet a be the memory address F.module.memaddrs[0].\n\nAssert: due to validation, S.mems[a] exists.\n\nLet mem be the memory instance S.mems[a].\n\nAssert: due to validation, a value of value type t is on the top of the stack.\n\nPop the value t.const~c from the stack.\n\nAssert: due to validation, a value of value type i32 is on the top of the stack.\n\nPop the value i32.const~i from the stack.\n\nLet ea be the integer i + memarg.offset.\n\nIf N is not part of the instruction, then:\n\nLet N be the bit width |t| of number type t.\n\nIf ea + N/8 is larger than the length of mem.data, then:\n\nTrap.\n\nIf N is part of the instruction, then:\n\nLet n be the result of computing wrap_{|t|,N}(c).\n\nLet b^\\ast be the byte sequence bytes_{iN}(n).\n\nElse:\n\nLet b^\\ast be the byte sequence bytes_t(c).\n\nReplace the bytes mem.data[ea \\mathrel{\\mathbf:} N/8] with b^\\ast.\n\n~\\\\[-1ex]\n\\begin{array}{l}\n\\begin{array}{lcl@{\\qquad}l}\nS; F; (i32.const~i)~(t.const~c)~(t.store~memarg) &\\hookrightarrow& S'; F; \\epsilon\n\\end{array}\n\\\\ \\qquad\n  \\begin{array}[t]{@r@{~}l@}\n  (\\mathrel{if} & ea = i + memarg.offset \\\\\n  \\wedge & ea + |t|/8 \\leq |S.mems[F.module.memaddrs[0]].data| \\\\\n  \\wedge & S' = S \\mathrel{with} mems[F.module.memaddrs[0]].data[ea \\mathrel{\\mathbf:} |t|/8] = bytes_t(c)) \\\\[1ex]\n  \\end{array}\n\\\\[1ex]\n\\begin{array}{lcl@{\\qquad}l}\nS; F; (i32.const~i)~(t.const~c)~(t.store{N}~memarg) &\\hookrightarrow& S'; F; \\epsilon\n\\end{array}\n\\\\ \\qquad\n  \\begin{array}[t]{@r@{~}l@}\n  (\\mathrel{if} & ea = i + memarg.offset \\\\\n  \\wedge & ea + N/8 \\leq |S.mems[F.module.memaddrs[0]].data| \\\\\n  \\wedge & S' = S \\mathrel{with} mems[F.module.memaddrs[0]].data[ea \\mathrel{\\mathbf:} N/8] = bytes_{iN}(wrap_{|t|,N}(c))) \\\\[1ex]\n  \\end{array}\n\\\\[1ex]\n\\begin{array}{lcl@{\\qquad}l}\nS; F; (i32.const~k)~(t.const~c)~(t.store{N}^?~memarg) &\\hookrightarrow& S; F; trap\n\\end{array}\n\\\\ \\qquad\n  (\\mathrel{otherwise}) \\\\\n\\end{array}"
}


1. Infer Placeholder Values:

The concrete instruction name is 'i32.store', and the instruction format is 't.store~memarg and t.storeN~memarg'. Therefore, the placeholder 't' in the instruction format represents a value type, and 'N' represents the bit width of the value type.

2. Replace Placeholders:

After replacing the placeholders in `validation_description` and `execution_description`, we get:

Validation Description:
```
valid instructions Instructions Memory Instructions i32.store~memarg
The memory C.mems[0] must be defined in the context.

The alignment 2^{memarg.align} must not be larger than the bit width of i32 divided by 8.

Then the instruction is valid with type [i32~i32] \rightarrow [].

\frac{
  C.mems[0] = memtype
  \qquad
  2^{memarg.align} \leq |i32|/8
}{
  C \vdash i32.store~memarg : [i32~i32] \rightarrow []
}
```

Execution Description:
```
exec instructions Instructions Memory Instructions i32.store~memarg and i32.storeN~memarg
Let F be the current frame.

Assert: due to validation, F.module.memaddrs[0] exists.

Let a be the memory address F.module.memaddrs[0].

Assert: due to validation, S.mems[a] exists.

Let mem be the memory instance S.mems[a].

Assert: due to validation, a value of value type i32 is on the top of the stack.

Pop the value i32.const~c from the stack.

Assert: due to validation, a value of value type i32 is on the top of the stack.

Pop the value i32.const~i from the stack.

Let ea be the integer i + memarg.offset.

If N is not part of the instruction, then:

Let N be the bit width |i32| of number type i32.

If ea + N/8 is larger than the length of mem.data, then:

Trap.

If N is part of the instruction, then:

Let n be the result of computing wrap_{|i32|,N}(c).

Let b^\\ast be the byte sequence bytes_{iN}(n).

Else:

Let b^\\ast be the byte sequence bytes_i32(c).

Replace the bytes mem.data[ea \\mathrel{\\mathbf:} N/8] with b^\\ast.
```

3. Determine Operand and Immediate Argument Types:


Result:
```json
{
    "op_0": "i32",
    "op_1": "i32",
    "imm_0": "align",
    "imm_1": "offset"
}
```

4. Summarize Validation Rules:


Result:
```json
[
    {
        "InputConstraint": [
            {
                "v1": "2^imm_0",
                "v2": "4",
                "relation": "le"
            }
        ],
        "ContextConstraint": [
            {
                "v1": "0",
                "v2": "context.mems.length",
                "relation": "lt"
            }
        ],
        "Valid": true
    }
]
```

5. Summarize the type of the instruction:


Result:
```json
[
    {
        "param": ["i32", "i32"],
        "result": []
    }
]
```

6. Describe Possible Behaviors:


Result:
```json
[
    {
        "InputConstraint": [
            {
                "v1": "op_1 + imm_1 + 4",
                "v2": "context.Mem[0].length",
                "relation": "le"
            }
        ],
        "ContextConstraint": [],
        "Description": "The instruction stores the operand op_0 to the memory.",
        "WhetherTrap": false
    },
    {
        "InputConstraint": [
            {
                "v1": "op_1 + imm_1 + 4",
                "v2": "context.Mem[0].length",
                "relation": "gt"
            }
        ],
        "ContextConstraint": [],
        "Description": "Memory out-of-bounds, leading to a trap.",
        "WhetherTrap": true
    }
]
```